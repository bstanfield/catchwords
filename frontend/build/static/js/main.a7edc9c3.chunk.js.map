{"version":3,"sources":["style/flex.js","style/scale.js","helpers/network.js","routes/New.js","helpers/util.js","components/Card.js","components/Cards.js","routes/PlayerBoard.js","routes/AddWord.js","routes/Home.js","App.js","index.js"],"names":["scale","require","genericFlex","display","flexWrap","justifyContent","alignContent","flexReverseOnSmall","flexDirection","justifyContentStart","justifyContentEnd","justifyContentSpaceBetween","justifyContentCenter","flexUntilMobile","flexUntilSmall","flexOnMedium","flexCenter","alignItems","textAlign","alignCenter","alignStretch","noWrapFlex","width","maxWidth","flexText","flexGrid","margin","twoColumnFlex","flexBasis","twoColumnFlexItem","position","flexGrow","rowReverse","alignItemsStart","alignItemsBaseline","threeColumnGrid","threeColumnGridItem","minWidth","module","exports","mq","facepaint","mqForFootprintOverview","mqForProjectPage","x","css","projectCardScale","overviewScale","rightSide","marginTop","marginRight","marginBottom","marginLeft","port","process","PORT","API_URL","generateHeaders","Headers","endpoint","body","request","Request","method","headers","JSON","stringify","fetch","response","contentType","get","includes","json","responseBody","key","params","url","searchParams","URLSearchParams","append","toString","post","header","fontFamily","fontSize","NewBoard","useState","setUrl","generateBoard","Network","id","useEffect","to","capitalizeFirst","R","colors","findCorrectGuesses","teamBoard","teamGuesses","filter","guess","findIncorrectGuesses","cardContainer","colorToDisplay","opacity","height","border","borderRadius","backgroundColor","boxShadow","color","cardText","size","cheatsheetMode","lineHeight","buttonStyle","selected","cursor","outline","transition","Card","props","name","index","replaceWord","attemptGuess","guessedByUser","guessedByOtherTeam","guessing","isUserGivingClue","cardType","length","onClick","top","left","style","bottom","cardName","state","handleReplaceWord","handleAttemptGuess","correctBlueGuesses","blueGuesses","incorrectGuesses","userTeam","correctRedGuesses","redGuesses","showCheatsheet","redKey","blueKey","refreshCard","guessingState","Cards","words","map","word","primaryContainer","fontWeight","h4","topContainer","paddingTop","paddingBottom","pageFade","zIndex","modal","padding","turnButton","waitingStyle","borderColor","cheatsheetButton","isSelected","bottomBar","initialState","localTurnCount","showModal","currentTurnGuesses","editWordsMode","boardReducer","action","type","splice","swapWords","team","Error","inningRow","inning","isCurrentInning","borderLeft","boxSizing","inningText","textTransform","loadBoard","boardId","dispatch","red","blue","turnCount","allIncorrectGuesses","concat","updateBoard","withRouter","match","useReducer","intervalId","setInterval","clearInterval","setTimeout","guesses","teamColor","turnText","minHeight","total","className","dotsWithId","Array","fill","item","i","redTurns","element","blueTurns","borderBottom","newArr","AddWord","setWord","addWordToDb","weight","ok","alert","value","onChange","event","target","centeredContainer","right","button","textDecoration","activeGames","boardsList","p","paddingLeft","div","Home","boards","setBoards","getBoards","href","obj","hasOwnProperty","isEmpty","Object","keys","timeStamp","now","Date","secondsPast","getTime","parseInt","day","getDate","month","toDateString","replace","year","getFullYear","timeSince","timestamp","serif","universalStyles","App","exact","path","New","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a7edc9c3.chunk.js","sourcesContent":["const { scale } = require('../style/scale');\n\nconst genericFlex = scale({\n  display: 'flex',\n  flexWrap: 'wrap',\n  justifyContent: 'space-between',\n  alignContent: 'flex-start'\n});\n\nconst flexReverseOnSmall = scale({\n  flexDirection: ['column-reverse', 'column-reverse', 'row', 'row']\n});\n\nconst justifyContentStart = scale({\n  justifyContent: 'flex-start'\n});\n\nconst justifyContentEnd = scale({\n  justifyContent: 'flex-end'\n});\n\nconst justifyContentSpaceBetween = scale({\n  justifyContent: 'space-between'\n});\n\nconst justifyContentCenter = scale({\n  justifyContent: 'center'\n});\n\nconst flexUntilMobile = scale({\n  display: ['block', 'flex']\n});\n\nconst flexUntilSmall = scale({\n  display: ['block', 'block', 'flex']\n});\n\nconst flexOnMedium = scale({\n  display: ['block', 'block', 'flex', 'block']\n});\n\nconst flexCenter = scale({\n  alignItems: 'center',\n  textAlign: 'center'\n});\n\nconst alignCenter = scale({\n  alignItems: 'center'\n});\n\nconst alignStretch = scale({\n  alignItems: 'stretch'\n});\n\nconst noWrapFlex = scale({\n  display: 'flex',\n  flexWrap: 'nowrap',\n  width: 'fit-content',\n  maxWidth: '100%',\n  justifyContent: 'space-between',\n  alignItems: 'center'\n});\n\nconst flexText = scale({\n  display: 'flex',\n  justifyContent: ['center', 'center', 'flex-start'],\n  flexWrap: 'wrap',\n  alignItems: 'baseline'\n});\n\nconst flexGrid = scale({\n  display: 'flex',\n  justifyContent: ['center', 'center', 'flex-start'],\n  flexWrap: 'wrap',\n  margin: '-10px'\n});\n\nconst twoColumnFlex = scale({\n  display: ['block', 'block', 'flex'],\n  flexBasis: '45%',\n  flexWrap: ['wrap', 'nowrap'],\n  justifyContent: 'space-between'\n});\n\nconst twoColumnFlexItem = scale({\n  position: 'relative',\n  width: ['100%', '100%', '48%', '48%']\n});\n\nconst flexGrow = scale({\n  flexGrow: 1\n});\n\nconst rowReverse = scale({\n  display: ['block', 'block', 'flex', 'flex'],\n  flexWrap: 'wrap',\n  flexDirection: 'row-reverse',\n  justifyContent: 'flex-start'\n});\n\nconst alignItemsStart = scale({\n  alignItems: 'flex-start'\n});\n\nconst alignItemsBaseline = scale({\n  alignItems: 'baseline'\n});\n\nconst threeColumnGrid = scale({\n  display: 'flex',\n  flexBasis: '33%',\n  flexWrap: 'wrap',\n  margin: [0, '0 -10px']\n});\n\nconst threeColumnGridItem = scale({\n  position: 'relative',\n  minWidth: '200px',\n  width: ['100%', '100%', '45%', '30%'],\n  margin: ['10px auto', '10px']\n});\n\nmodule.exports = {\n  genericFlex,\n  flexGrow,\n  flexUntilMobile,\n  flexUntilSmall,\n  flexGrid,\n  flexText,\n  twoColumnFlex,\n  twoColumnFlexItem,\n  threeColumnGrid,\n  threeColumnGridItem,\n  justifyContentStart,\n  justifyContentEnd,\n  justifyContentSpaceBetween,\n  justifyContentCenter,\n  noWrapFlex,\n  flexCenter,\n  alignCenter,\n  alignStretch,\n  alignItemsStart,\n  alignItemsBaseline,\n  rowReverse,\n  flexReverseOnSmall,\n  flexOnMedium\n};\n","import { css } from '@emotion/core';\nimport facepaint from 'facepaint';\n\n// import mq to override media query breakpoints for a given page\nexport const mq = facepaint([\n  '@media(min-width: 420px)',\n  '@media(min-width: 720px)',\n  '@media(min-width: 1000px)'\n]);\n\nexport const mqForFootprintOverview = facepaint([\n  '@media(min-width: 420px)',\n  '@media(min-width: 720px)',\n  '@media(min-width: 1135px)',\n  '@media(min-width: 1215px)'\n]);\n\nexport const mqForProjectPage = facepaint([\n  '@media(min-width: 420px)',\n  '@media(min-width: 520px)',\n  '@media(min-width: 720px)',\n  '@media(min-width: 1080px)'\n]);\n\n// import scale to use media queries with emotion classes\nexport const scale = x => css(mq(x));\nexport const projectCardScale = x => css(mqForProjectPage(x));\nexport const overviewScale = x => css(mqForFootprintOverview(x));\n\n// GLOBAL SCALE STYLES\nexport const rightSide = scale({\n  marginTop: '50px',\n  marginRight: '0',\n  marginBottom: '0',\n  marginLeft: ['0px', '0px', '240px']\n});\n","const port = process.env.PORT || 3333;\nconst API_URL = `http://localhost:${port}/api`;\n\nfunction generateHeaders() {\n  const headers = new Headers({\n    'Content-Type': 'application/json'\n  });\n\n  return headers;\n}\n\nasync function post(endpoint, body) {\n  const request = new Request(`${API_URL}/${endpoint}`, {\n    method: 'POST',\n    headers: generateHeaders(),\n    body: JSON.stringify(body)\n  });\n\n  const response = await fetch(request);\n\n  const contentType = response.headers.get('content-type');\n\n  if (contentType && contentType.includes('application/json')) {\n    const responseBody = await response.json();\n    return [response, responseBody];\n  }\n\n  return [response, null];\n}\n\nasync function get(endpoint, params = {}) {\n  const url = `${API_URL}/${endpoint}`;\n  const searchParams = new URLSearchParams();\n\n  for (const key in params) {\n    searchParams.append(key, params[key]);\n  }\n\n  const request = new Request(`${url}?${searchParams.toString()}`, {\n    method: 'GET',\n    headers: generateHeaders()\n  });\n\n  const response = await fetch(request);\n\n  const contentType = response.headers.get('content-type');\n\n  if (contentType && contentType.includes('application/json')) {\n    const responseBody = await response.json();\n    return [response, responseBody];\n  }\n\n  return [response, null];\n}\n\nexport default {\n  post,\n  get\n};\n","/** @jsx jsx */\n\nimport React, { useEffect, useState } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { jsx } from '@emotion/core';\nimport { scale } from '../style/scale';\nimport Network from '../helpers/network';\n\nconst header = scale({\n  fontFamily: 'Work Sans, system-ui, sans-serif',\n  textAlign: 'center',\n  fontSize: 36\n});\n\nconst NewBoard = () => {\n  const [url, setUrl] = useState(false);\n\n  const generateBoard = async () => {\n    const [response, responseBody] = await Network.get('get-new-board');\n    setUrl(responseBody.id);\n  };\n\n  useEffect(() => {\n    generateBoard();\n  }, []);\n\n  return (\n    <div>\n      <h1 css={header}>Creating board...</h1>\n      {url ? <Redirect to={`/board/${url}`} /> : null}\n    </div>\n  );\n};\n\nexport default NewBoard;\n","/** @jsx jsx */\n\nimport * as R from 'ramda';\n\nexport const capitalizeFirst = x => R.concat(R.toUpper(R.head(x)), R.tail(x));\n\nexport const colors = {\n  primaryText: '#4A4A4A',\n  lightGrayText: 'rgba(200, 200, 200, 0.9)',\n  backgroundWhite: '#FcFcFc',\n  backgroundShadow: '#EEECE5',\n  primaryRed: '#ff4622',\n  primaryGreen: '#1A3C34',\n  greenButton: '#4dc156',\n  progressBar: '#ffd506',\n  errorRed: '#e93710',\n  lightBorder: '#BCBCBC',\n  veryLightGray: 'rgba(0,0,0,0.1)',\n  neutralCard: 'transparent',\n  correctCard: '#B7F4A9',\n  assassinCard: '#FF9F9F'\n};\n\nexport const findCorrectGuesses = (teamBoard, teamGuesses) => {\n  return teamGuesses.filter(guess => teamBoard[guess] === 1);\n};\n\nexport const findIncorrectGuesses = (teamBoard, teamGuesses) => {\n  const incorrect = teamGuesses.filter(guess => teamBoard[guess] === 2);\n  return incorrect;\n};\n","/** @jsx jsx */\n\nimport { Fragment } from 'react';\nimport { jsx } from '@emotion/core';\nimport { scale } from '../style/scale';\nimport { capitalizeFirst, colors } from '../helpers/util';\n\nconst cardContainer = (colorToDisplay, opacity) =>\n  scale({\n    width: '185px',\n    height: '85px',\n    border: '1px solid #BABABA',\n    borderRadius: '4px',\n    backgroundColor: colorToDisplay || 'white',\n    margin: '5px 5px',\n    boxShadow: '0 1px 6px 0 #ddd',\n    color: `rgba(0,0,0,${opacity})`\n  });\n\nconst cardText = (size, cheatsheetMode) =>\n  scale({\n    textAlign: 'center',\n    fontSize: size || 22,\n    lineHeight: '30px',\n    color: '#333333',\n    opacity: cheatsheetMode ? 0.5 : 1\n  });\n\nconst buttonStyle = selected =>\n  scale({\n    position: 'relative',\n    cursor: 'pointer',\n    outline: 'none',\n    transition: '300ms opacity',\n    backgroundColor: selected && colors.neutralCard,\n    border: selected && '1px solid green',\n    '&:hover': {\n      opacity: 0.8\n    }\n  });\n\nconst Card = props => {\n  const {\n    name,\n    index,\n    replaceWord,\n    attemptGuess,\n    selected,\n    opacity,\n    guessedByUser,\n    guessedByOtherTeam,\n    guessing,\n    isUserGivingClue,\n    cardType,\n    cheatsheetMode\n  } = props;\n\n  const backgroundColor =\n    cardType === 'neutral' && !guessedByOtherTeam\n      ? colors.neutralCard\n      : cardType === 'correct' && !guessedByUser && !guessedByOtherTeam\n      ? colors.correctCard\n      : cardType === 'assassin'\n      ? colors.assassinCard\n      : 'white';\n\n  let size = 26;\n  if (name) {\n    if (name.length > 0 && name.length <= 8) {\n      size = 32;\n    } else if (name.length > 8 && name.length <= 12) {\n      size = 26;\n    } else if (name.length > 12) {\n      size = 20;\n    }\n  }\n\n  return (\n    <button\n      css={[\n        cardContainer(backgroundColor, opacity),\n        buttonStyle(selected),\n        isUserGivingClue && { cursor: 'not-allowed' }\n      ]}\n      key={index}\n      onClick={() =>\n        !isUserGivingClue && guessing\n          ? attemptGuess()\n          : !guessing\n          ? replaceWord()\n          : null\n      }\n    >\n      {guessedByOtherTeam && cardType === 'neutral' && (\n        <strong>\n          <p css={{ position: 'absolute', top: 4, left: 8, opacity: 0.6 }}>✗</p>\n        </strong>\n      )}\n      {guessedByUser || (guessedByOtherTeam && cardType === 'correct') ? (\n        <strong>\n          <p css={{ position: 'absolute', top: 4, left: 8, opacity: 0.6 }}>\n            {cardType === 'correct' ? '✓' : '✗'} {capitalizeFirst(name)}\n          </p>\n        </strong>\n      ) : (\n        <Fragment>\n          <h4 css={[cardText(size, cardType === 'neutral' && cheatsheetMode)]}>\n            {capitalizeFirst(name)}\n          </h4>\n          {!guessing && (\n            <p style={{ position: 'absolute', bottom: 5, opacity: 0.5 }}>\n              Swap\n            </p>\n          )}\n        </Fragment>\n      )}\n      {/* {correctGuessesByBlueTeam.includes(index) && <p style={{ fontSize: 10, position: 'absolute', top: 3, right: 6 }}><span>🔷</span></p>}\n      {correctGuessesByRedTeam.includes(index) && <p style={{ fontSize: 10, position: 'absolute', top: 3, right: 6 }}><span>🔴</span></p>} */}\n    </button>\n  );\n};\n\nexport default Card;\n","/** @jsx jsx */\n\nimport { jsx } from '@emotion/core';\nimport { genericFlex } from '../style/flex';\nimport { colors } from '../helpers/util';\nimport CardUI from './Card';\n\nconst Card = ({\n  cardName,\n  index,\n  state,\n  handleReplaceWord,\n  handleAttemptGuess,\n  isUserGivingClue\n}) => {\n  let cardType = '';\n  let guessedByUser = false;\n  let guessedByOtherTeam = false;\n\n  // edit this for edit words capability\n  if (\n    state.correctBlueGuesses.includes(index) ||\n    state.blueGuesses.includes(index) ||\n    state.incorrectGuesses.includes(index)\n  ) {\n    if (state.userTeam === 'blue') {\n      guessedByUser = true;\n    } else {\n      guessedByOtherTeam = true;\n    }\n  }\n\n  if (\n    state.correctRedGuesses.includes(index) ||\n    state.redGuesses.includes(index) ||\n    state.incorrectGuesses.includes(index)\n  ) {\n    if (state.userTeam === 'red') {\n      guessedByUser = true;\n    } else {\n      guessedByOtherTeam = true;\n    }\n  }\n  if (state.showCheatsheet) {\n    if (state.userTeam === 'red') {\n      if (state.redKey[index] === 1) {\n        cardType = 'correct';\n      } else if (state.redKey[index] === 2) {\n        cardType = 'assassin';\n      } else if (state.redKey[index] === 0) {\n        cardType = 'neutral';\n      }\n    } else if (state.userTeam === 'blue') {\n      if (state.blueKey[index] === 1) {\n        cardType = 'correct';\n      } else if (state.blueKey[index] === 2) {\n        cardType = 'assassin';\n      } else if (state.blueKey[index] === 0) {\n        cardType = 'neutral';\n      }\n    }\n  } else if (\n    state.correctBlueGuesses.includes(index) ||\n    state.correctRedGuesses.includes(index)\n  ) {\n    cardType = 'correct';\n  } else if (state.incorrectGuesses.includes(index)) {\n    cardType = 'assassin';\n  } else if (\n    state.redGuesses.includes(index) ||\n    state.blueGuesses.includes(index)\n  ) {\n    cardType = 'neutral';\n  }\n\n  // states:\n  // correct guess this turn - green background, little text, checkmark + name\n  // correct guess last turn - white bg, little text, checkmark + name\n  // incorrect guess - gray background, little text, x + name\n  // not guessed\n  // end game card\n\n  return (\n    <CardUI\n      cheatsheetMode={state.showCheatsheet}\n      key={index}\n      name={cardName}\n      index={index}\n      refreshCard={state.refreshCard}\n      guessing={state.guessingState}\n      isUserGivingClue={isUserGivingClue}\n      guessedByUser={guessedByUser}\n      guessedByOtherTeam={guessedByOtherTeam}\n      cardType={cardType}\n      attemptGuess={() => {\n        handleAttemptGuess(index);\n      }}\n      replaceWord={() => handleReplaceWord(index)}\n    />\n  );\n};\n\nconst Cards = props => {\n  const {\n    state,\n    handleAttemptGuess,\n    handleReplaceWord,\n    isUserGivingClue\n  } = props;\n  return (\n    <div css={genericFlex}>\n      {state.words.map((word, index) => (\n        <Card\n          cardName={word}\n          index={index}\n          state={state}\n          handleReplaceWord={handleReplaceWord}\n          handleAttemptGuess={handleAttemptGuess}\n          isUserGivingClue={isUserGivingClue}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default Cards;\n","/** @jsx jsx */\n\nimport { useEffect, useReducer } from 'react';\nimport { withRouter, Link } from 'react-router-dom';\nimport { jsx } from '@emotion/core';\nimport { scale } from '../style/scale';\nimport { findCorrectGuesses, findIncorrectGuesses } from '../helpers/util';\n\nimport Cards from '../components/Cards';\nimport Network from '../helpers/network';\n\nconst primaryContainer = scale({\n  maxWidth: '1000px',\n  color: '#333333',\n  margin: 'auto',\n  'h1, h2, h3, h4, p, a': {\n    fontFamily: 'Work Sans, system-ui !important',\n    margin: 0,\n    fontWeight: 600\n  },\n  h4: {\n    fontWeight: 500\n  }\n});\n\nconst topContainer = scale({\n  position: 'relative',\n  paddingTop: '12px',\n  paddingBottom: '12px',\n  marginBottom: '16px',\n  display: 'flex',\n  flexWrap: 'nowrap',\n  justifyContent: 'space-between',\n  alignItems: 'center'\n});\n\nconst pageFade = scale({\n  position: 'absolute',\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n  backgroundColor: 'rgba(0,0,0,0.2)',\n  width: '100vw',\n  height: '100%',\n  zIndex: 9999\n});\n\nconst modal = scale({\n  borderRadius: '6px',\n  backgroundColor: 'white',\n  padding: '20px 40px'\n});\n\nconst turnButton = {\n  color: 'black',\n  fontWeight: 500,\n  padding: '10px 20px',\n  cursor: 'pointer',\n  borderRadius: '32px',\n  marginLeft: '16px',\n  fontSize: '22px',\n  border: '1px solid',\n  '&:hover': {\n    opacity: 0.9\n  }\n};\n\nconst endTurnStyle = guesses =>\n  scale({\n    backgroundColor: guesses > 0 ? '#46F01B' : '#FFDA1B',\n    borderColor: guesses > 0 ? '#34CA0F' : '#F0CE1B',\n    boxShadow:\n      guesses > 0\n        ? '0px 4px 14px rgba(0, 255, 56, 0.44)'\n        : '0px 4px 14px rgba(253, 198, 58, 1)'\n  });\n\nconst waitingStyle = scale({\n  backgroundColor: '#EAEBF2',\n  borderColor: '#CDCFDC',\n  cursor: 'not-allowed'\n});\n\nconst cheatsheetButton = isSelected =>\n  scale({\n    borderRadius: '32px',\n    color: isSelected ? 'white' : '#333',\n    backgroundColor: isSelected ? '#5696F6' : 'transparent',\n    '&:hover': {\n      backgroundColor: isSelected ? '#5696F6' : '#ddd'\n    }\n  });\n\nconst buttonStyle = isSelected =>\n  scale({\n    fontWeight: 500,\n    padding: '8px 18px',\n    borderRadius: '3px',\n    border: 'none',\n    cursor: 'pointer',\n    margin: '20px 20px 20px 0',\n    fontSize: '20px',\n    backgroundColor: isSelected ? '#2ef72e' : '#eeeeee',\n    '&:hover': {\n      backgroundColor: isSelected ? '#2ef72e' : '#d0d0d0',\n      opacity: isSelected ? 0.7 : 1\n    }\n  });\n\nconst bottomBar = scale({\n  display: 'flex',\n  justifyContent: 'space-between'\n});\n\nconst initialState = {\n  words: [],\n  id: '',\n  localTurnCount: 1,\n  showModal: false,\n  currentTurnGuesses: 0,\n  editWordsMode: false,\n  refreshCard: 0,\n  incorrectGuesses: [],\n  guessingState: true, // false = word swap mode\n  userTeam: null,\n  redKey: [],\n  blueKey: [],\n  redGuesses: [],\n  blueGuesses: [],\n  correctRedGuesses: [],\n  correctBlueGuesses: [],\n  showCheatsheet: false\n};\n\nfunction boardReducer(state, action) {\n  const swapWords = (state, action) => {\n    state.words.splice(action.index, 1, action.word);\n    return {\n      ...state,\n      words: state.words\n    };\n  };\n\n  switch (action.type) {\n    case 'update':\n      return { ...state, ...action.state };\n    case 'reset_turn_guesses':\n      return { ...state, currentTurnGuesses: 0 };\n    case 'increment_guesses':\n      return { ...state, currentTurnGuesses: state.currentTurnGuesses + 1 };\n    case 'increment_turn':\n      return { ...state, localTurnCount: state.localTurnCount + 1 };\n    case 'toggle_modal':\n      return { ...state, showModal: !state.showModal };\n    case 'toggle_swap_mode':\n      return {\n        ...state,\n        editWordsMode: !state.editWordsMode,\n        guessingState: !state.guessingState\n      };\n    case 'swap_word':\n      return swapWords(state, action);\n    case 'toggle_cheatsheet':\n      return { ...state, showCheatsheet: !state.showCheatsheet };\n    case 'set_team':\n      return { ...state, userTeam: action.team };\n    case 'reset':\n      return initialState;\n    default:\n      throw new Error();\n  }\n}\n\nconst inningRow = { display: 'flex', flexWrap: 'nowrap', alignItems: 'center' };\n\nconst inning = isCurrentInning => ({\n  backgroundColor: isCurrentInning ? 'rgba(86, 150, 246, 0.12)' : 'transparent',\n  color: isCurrentInning ? 'black' : '#999',\n  padding: '6px 12px',\n  borderLeft: '1px solid #ccc',\n  width: '40px',\n  boxSizing: 'border-box',\n  textAlign: 'center'\n});\n\nconst inningText = {\n  opacity: 0.4,\n  fontWeight: 500,\n  textTransform: 'uppercase',\n  fontSize: '14px',\n  width: 100\n};\n\nconst loadBoard = async (boardId, dispatch) => {\n  const [response, responseBody] = await Network.get(\n    `get-existing-board/${boardId}`\n  );\n  const {\n    words,\n    red,\n    blue,\n    redGuesses,\n    blueGuesses,\n    turnCount,\n    id\n  } = responseBody;\n  const allIncorrectGuesses = findIncorrectGuesses(\n    red,\n    blueGuesses || []\n  ).concat(findIncorrectGuesses(blue, redGuesses || []));\n  dispatch({\n    type: 'update',\n    state: {\n      words,\n      id,\n      localTurnCount: turnCount,\n      incorrectGuesses: allIncorrectGuesses,\n      redKey: red,\n      blueKey: blue,\n      redGuesses: redGuesses || [],\n      blueGuesses: blueGuesses || [],\n      correctRedGuesses: findCorrectGuesses(blue, redGuesses || []),\n      correctBlueGuesses: findCorrectGuesses(red, blueGuesses || [])\n    }\n  });\n};\n\nconst updateBoard = async (boardId, dispatch) => {\n  const [response, responseBody] = await Network.get(\n    `get-existing-board/${boardId}`\n  );\n  const { red, blue, redGuesses, blueGuesses, turnCount, words } = responseBody;\n  const allIncorrectGuesses = findIncorrectGuesses(\n    red,\n    blueGuesses || []\n  ).concat(findIncorrectGuesses(blue, redGuesses || []));\n  dispatch({\n    type: 'update',\n    state: {\n      words,\n      localTurnCount: turnCount,\n      incorrectGuesses: allIncorrectGuesses,\n      redGuesses: redGuesses || [],\n      blueGuesses: blueGuesses || [],\n      correctRedGuesses: findCorrectGuesses(blue, redGuesses || []),\n      correctBlueGuesses: findCorrectGuesses(red, blueGuesses || [])\n    }\n  });\n};\n\nconst PlayerBoard = ({ match }) => {\n  // STATE -----\n  // Board state\n  const [state, dispatch] = useReducer(boardReducer, initialState);\n\n  // END STATE -----\n\n  const {\n    localTurnCount,\n    showModal,\n    currentTurnGuesses,\n    id,\n    editWordsMode,\n    refreshCard,\n    userTeam,\n    redKey,\n    blueKey,\n    redGuesses,\n    blueGuesses,\n    showCheatsheet\n  } = state;\n\n  // Loads board\n  useEffect(() => {\n    loadBoard(match.params.id, dispatch);\n  }, [match.params.id]);\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      updateBoard(match.params.id, dispatch);\n    }, 1000);\n\n    return () => clearInterval(intervalId);\n  }, []);\n\n  useEffect(() => {\n    if (localTurnCount === 1) return;\n    dispatch({ type: 'toggle_modal' });\n  }, [localTurnCount, userTeam]);\n\n  useEffect(() => {\n    dispatch({\n      type: 'update',\n      state: {\n        correctBlueGuesses: findCorrectGuesses(redKey, blueGuesses || []),\n        correctRedGuesses: findCorrectGuesses(blueKey, redGuesses || [])\n      }\n    });\n  }, [blueKey, redKey, redGuesses, blueGuesses]);\n\n  useEffect(() => {\n    if (showModal) {\n      setTimeout(() => {\n        dispatch({ type: 'toggle_modal' });\n      }, 1500);\n    }\n  }, [showModal]);\n\n  const isUserGivingClue =\n    (localTurnCount % 2 === 0 && userTeam === 'blue') ||\n    (localTurnCount % 2 === 1 && userTeam === 'red');\n\n  const teamColor = userTeam === 'blue' ? '🔷' : '🔴';\n  const turnText = (() => {\n    if (!userTeam) {\n      return 'Choose your team...';\n    }\n    if (showCheatsheet) {\n      return `${teamColor} Viewing cheatsheet`;\n    }\n    if (isUserGivingClue) {\n      return `${teamColor} Give a clue`;\n    }\n    return `${teamColor} It's your turn to guess`;\n  })();\n\n  // handle edit words\n  const handleEditWords = () => {\n    dispatch({ type: 'toggle_swap_mode' });\n  };\n\n  const handleAttemptGuess = index => {\n    if (state.localTurnCount % 2 === 0) {\n      // RED TEAM\n      const newArr = state.redGuesses.concat([index]);\n      dispatch({ type: 'update', state: { redGuesses: newArr } });\n      Network.post('update-guesses', {\n        id: state.id,\n        team: 'red',\n        guesses: newArr\n      });\n    } else {\n      // BLUE TEAM\n      const newArr = state.blueGuesses.concat([index]);\n      dispatch({ type: 'update', state: { blueGuesses: newArr } });\n      Network.post('update-guesses', {\n        id: state.id,\n        team: 'blue',\n        guesses: newArr\n      });\n    }\n\n    dispatch({ type: 'increment_guesses' });\n  };\n\n  const handleReplaceWord = async index => {\n    const [response, responseBody] = await Network.get(\n      `swap-word/${match.params.id}/${index}`\n    );\n    dispatch({\n      type: 'swap_word',\n      word: responseBody.word,\n      index\n    });\n  };\n\n  const Dots = ({ total, turnCount, className }) => {\n    const totalDots = new Array(total).fill(false);\n    const dotsWithId = totalDots.map((item, i) => i + 1);\n    const redTurns = dotsWithId.filter((element, index) => {\n      return index % 2 === 1;\n    });\n    const blueTurns = dotsWithId.filter((element, index) => {\n      return index % 2 === 0;\n    });\n    return (\n      <div className={className}>\n        <div css={[inningRow, { borderBottom: '1px solid #ccc' }]}>\n          <p css={inningText}>Blue</p>\n          {blueTurns.map(id => (\n            <div css={inning(turnCount === id)}>\n              {id < turnCount ? '✓' : '-'}\n            </div>\n          ))}\n        </div>\n        <div css={inningRow}>\n          <p css={inningText}>Red turns</p>\n          <div css={inningRow}>\n            {redTurns.map(id => (\n              <div css={inning(turnCount === id)}>\n                {id < turnCount ? '✓' : '-'}\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div\n      css={{\n        backgroundColor: showCheatsheet ? 'white' : '#eee',\n        minHeight: '100vh',\n        boxSizing: 'border-box'\n      }}\n    >\n      {!userTeam && (\n        <div css={pageFade}>\n          <div css={modal}>\n            <h1 style={{ textAlign: 'center' }}>Join a team</h1>\n            <button\n              css={buttonStyle()}\n              onClick={() => {\n                // sets turn count to 1 and current turn guesses to none\n                dispatch({ type: 'set_team', team: 'red' });\n              }}\n            >\n              🔴 Red team\n            </button>\n            <button\n              css={buttonStyle()}\n              onClick={() => {\n                // sets turn count to 1 and current turn guesses to none\n                dispatch({ type: 'set_team', team: 'blue' });\n              }}\n            >\n              🔷 Blue team\n            </button>\n          </div>\n        </div>\n      )}\n\n      {showModal && (\n        <div css={pageFade}>\n          <div css={modal}>\n            <p>Turn {localTurnCount}/7</p>\n            <h1>{turnText}</h1>\n          </div>\n        </div>\n      )}\n\n      <div css={primaryContainer}>\n        <div css={topContainer}>\n          <h2 style={{ fontSize: 30, display: 'inline', marginRight: '20px' }}>\n            {turnText}\n          </h2>\n          <div\n            css={{\n              display: 'flex',\n              flexWrap: 'nowrap',\n              justifyContent: 'flex-end',\n              alignItems: 'center'\n            }}\n          >\n            <Dots\n              turnCount={localTurnCount}\n              total={7}\n              css={{ marginRight: 8 }}\n            />\n            {!showCheatsheet && isUserGivingClue ? (\n              <button css={[turnButton, waitingStyle]}>Waiting...</button>\n            ) : !showCheatsheet ? (\n              <button\n                css={[turnButton, endTurnStyle(currentTurnGuesses)]}\n                onClick={() => {\n                  Network.post(`update-turn`, {\n                    id,\n                    turnCount: localTurnCount + 1\n                  });\n                  dispatch({ type: 'increment_turn' });\n                  dispatch({ type: 'reset_turn_guesses' });\n                }}\n              >\n                {isUserGivingClue ? 'Waiting...' : 'End turn'}\n              </button>\n            ) : null}\n          </div>\n        </div>\n\n        <Cards\n          refreshCard={refreshCard}\n          state={state}\n          isUserGivingClue={isUserGivingClue}\n          dispatch={dispatch}\n          handleAttemptGuess={handleAttemptGuess}\n          handleReplaceWord={handleReplaceWord}\n        />\n\n        {/* BOTTOM ACTIONS */}\n        <div css={bottomBar}>\n          <div>\n            {userTeam === 'red' ? (\n              <button\n                css={[\n                  buttonStyle(showCheatsheet),\n                  cheatsheetButton(showCheatsheet)\n                ]}\n                onClick={() => dispatch({ type: 'toggle_cheatsheet' })}\n              >\n                Red cheatsheet\n              </button>\n            ) : (\n              <button\n                css={[\n                  buttonStyle(showCheatsheet),\n                  cheatsheetButton(showCheatsheet)\n                ]}\n                onClick={() => dispatch({ type: 'toggle_cheatsheet' })}\n              >\n                Blue cheatsheet\n              </button>\n            )}\n\n            <button\n              css={buttonStyle(editWordsMode)}\n              onClick={() => handleEditWords()}\n            >\n              Edit words\n            </button>\n          </div>\n          <Link to=\"/new\">\n            <button css={[buttonStyle(), { marginRight: 0 }]}>\n              New board →\n            </button>\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withRouter(PlayerBoard);\n","import React, { useState } from 'react';\nimport Network from '../helpers/network';\n\nconst AddWord = () => {\n  const [word, setWord] = useState('');\n\n  const addWordToDb = async () => {\n    const [response, responseBody] = await Network.post('add-word', {\n      word,\n      weight: 100,\n    });\n    if (!response.ok) {\n      alert(`${word} already exists in the game 😲`);\n    } else {\n      alert(`${word} added to the game!`);\n    }\n    setWord('');\n  };\n\n  const handleChange = event => {\n    setWord(event.target.value);\n  };\n\n  return (\n    <div style={{ textAlign: 'center', marginTop: 58 }}>\n      <h1>Add a new word to the game</h1>\n      <label>\n        Word:\n        <input type=\"text\" value={word} onChange={handleChange} name=\"name\" />\n      </label>\n      <button onClick={async () => addWordToDb()}>Submit</button>\n    </div>\n  );\n};\n\nexport default AddWord;\n","/** @jsx jsx */\n\nimport React, { useEffect, useState } from 'react';\nimport { colors } from '../helpers/util';\nimport { jsx } from '@emotion/core';\nimport { scale } from '../style/scale';\nimport Network from '../helpers/network';\n\nconst centeredContainer = scale({\n  position: 'absolute',\n  left: 0,\n  right: 0,\n  top: 0,\n  margin: 'auto',\n  width: 600,\n  maxWidth: '90%',\n  height: 'fit-content'\n});\n\nconst header = scale({\n  fontFamily: 'Work Sans, system-ui, sans-serif',\n  textAlign: 'center',\n  fontSize: 60,\n  fontWeight: 'bold'\n});\n\nconst button = scale({\n  fontFamily: 'Work Sans, system-ui, sans-serif',\n  maxWidth: 200,\n  backgroundColor: colors.greenButton,\n  padding: 18,\n  fontSize: 22,\n  textAlign: 'center',\n  color: 'white',\n  textDecoration: 'none',\n  borderRadius: 4,\n  display: 'block',\n  margin: 'auto',\n  boxShadow: '0 4px 5px 0 #cacaca',\n  transition: 'box-shadow 0.3s ease',\n  '&:hover': {\n    boxShadow: '0 4px 8px 0 #bfbfbf'\n  }\n});\n\nconst activeGames = scale({\n  fontFamily: 'Work Sans, system-ui, sans-serif',\n  fontSize: 20\n});\n\nconst boardsList = scale({\n  padding: 20,\n  p: {\n    opacity: 0.3,\n    margin: 0,\n    paddingTop: 12,\n    paddingLeft: 8\n  },\n  div: {\n    marginBottom: 24\n  }\n});\n\nfunction isEmpty(obj) {\n  for (const key in obj) {\n    // eslint-disable-next-line no-prototype-builtins\n    if (obj.hasOwnProperty(key)) return false;\n  }\n  return true;\n}\n\nfunction timeSince(timeStamp) {\n  const now = new Date(),\n    secondsPast = (now.getTime() - timeStamp) / 1000;\n  if (secondsPast < 60) {\n    return `${parseInt(secondsPast)}s`;\n  }\n  if (secondsPast < 3600) {\n    return `${parseInt(secondsPast / 60)}m`;\n  }\n  if (secondsPast <= 86400) {\n    return `${parseInt(secondsPast / 3600)}h`;\n  }\n  if (secondsPast > 86400) {\n    const day = timeStamp.getDate();\n    const month = timeStamp\n      .toDateString()\n      .match(/ [a-zA-Z]*/)[0]\n      .replace(' ', '');\n    const year =\n      timeStamp.getFullYear() === now.getFullYear()\n        ? ''\n        : ` ${timeStamp.getFullYear()}`;\n    return `${day} ${month}${year}`;\n  }\n}\n\nconst Home = () => {\n  const [boards, setBoards] = useState({});\n\n  const getBoards = async () => {\n    const [response, responseBody] = await Network.get('get-boards');\n    setBoards(responseBody);\n  };\n\n  useEffect(() => {\n    getBoards();\n  }, []);\n\n  return (\n    <div css={centeredContainer}>\n      <h1 css={header}>Catchwords</h1>\n      <a css={button} href=\"/new\">\n        Start new game\n      </a>\n      <br />\n      <br />\n      <br />\n      <div css={activeGames}>\n        <p>Active games:</p>\n        <hr />\n        <div css={boardsList}>\n          {!isEmpty(boards) ? (\n            Object.keys(boards).map(id => (\n              <div>\n                <a href={`/board/${id}`}>{id}</a>\n                <p>\n                  created {timeSince(new Date(boards[id].timestamp))} ago •\n                  turn: {boards[id].turnCount}\n                </p>\n              </div>\n            ))\n          ) : (\n            <p style={{ opacity: 1 }}>🙈 No active games right now!</p>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","/** @jsx jsx */\n\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport New from './routes/New';\nimport PlayerBoard from './routes/PlayerBoard';\nimport AddWord from './routes/AddWord';\nimport { jsx } from '@emotion/core';\nimport Home from './routes/Home';\nimport { scale } from './style/scale';\n\nconst serif = 'Work Sans, system-ui, Helvetica, Arial, sans-serif !important';\n\nconst universalStyles = scale({\n  fontFamily: serif,\n  button: {\n    fontFamily: serif\n  }\n});\n\nexport default function App() {\n  return (\n    <div css={universalStyles}>\n      <Router>\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"/new\">\n            <New />\n          </Route>\n          <Route path=\"/board/:id\">\n            <PlayerBoard />\n          </Route>\n          <Route path=\"/words/add\">\n            <AddWord />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}